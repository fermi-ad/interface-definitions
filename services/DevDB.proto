syntax = "proto3";

package devdb;

service DevDB {
    // Clients can ask for device information (obtained from the
    // device database.) The function is passed an array of device
    // names. The function returns an array of results. The order of
    // the results is the same as the request.

    rpc getDeviceInfo(DeviceList) returns (DeviceInfoReply) {}

    // This function allows clients to monitor device info changes.
    // The client passes an array of device names. The function
    // returns a stream which will report all changes to the device's
    // information until the stream is canceled. The client will
    // receive a complete set of device information before monitoring
    // changes so there's no need to do an initial call to
    // `getDeviceInfo()`.

    // rpc monitorDeviceInfo(DeviceList) returns (stream InfoEntry) {}
}

// Holds an array of device names (strings).

message DeviceList {
    repeated string device = 1;
}

message Property {
    optional string primary_units = 1;
    optional string common_units = 2;
}

// Defines the information associated with one bit of the digital
// status.

message DigitalStatusItem {
    uint32 bit_no = 1;
    uint32 color0 = 2;
    string name0 = 3;
    uint32 color1 = 4;
    string name1 = 5;
    string description =6;
}

// Holds all the Digital Status information for the device.

message DigitalStatus {
    repeated DigitalStatusItem bits = 1;
}

// A single Digital Control item which defines the information
// associated with one command.

message DigitalControlItem {
    uint32 value = 1;
    string short_name = 2;
    string long_name = 3;
}

// Holds all the Digital Control commands for the device.

message DigitalControl {
    repeated DigitalControlItem cmds = 1;
}

// Holds information about a device.

message DeviceInfo {
    uint32 device_index = 1;
    string description = 2;
    optional Property reading = 3;
    optional Property setting = 4;
    optional DigitalControl dig_control = 5;
    optional DigitalStatus dig_status = 6;
}

// One entry in `DeviceInfoReply`s array.

message InfoEntry {
    string name = 1;
    oneof result {
	DeviceInfo device = 2;
	string errMsg = 3;
    }
}

// Holds an array

message DeviceInfoReply {
    repeated InfoEntry set = 1;
}
